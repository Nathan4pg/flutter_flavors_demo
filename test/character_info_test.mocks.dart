// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_code_practical/test/character_info_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i4;

import 'package:flutter_code_practical/view_models/character_info_view_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CharacterInfoViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharacterInfoViewModel extends _i1.Mock
    implements _i2.CharacterInfoViewModel {
  MockCharacterInfoViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
      ) as String);

  @override
  set name(String? _name) => super.noSuchMethod(
        Invocation.setter(
          #name,
          _name,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: '',
      ) as String);

  @override
  set description(String? _description) => super.noSuchMethod(
        Invocation.setter(
          #description,
          _description,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get shortDescription => (super.noSuchMethod(
        Invocation.getter(#shortDescription),
        returnValue: '',
      ) as String);

  @override
  set shortDescription(String? _shortDescription) => super.noSuchMethod(
        Invocation.setter(
          #shortDescription,
          _shortDescription,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get imageUrl => (super.noSuchMethod(
        Invocation.getter(#imageUrl),
        returnValue: '',
      ) as String);

  @override
  set imageUrl(String? _imageUrl) => super.noSuchMethod(
        Invocation.setter(
          #imageUrl,
          _imageUrl,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get errorMsg => (super.noSuchMethod(
        Invocation.getter(#errorMsg),
        returnValue: '',
      ) as String);

  @override
  set errorMsg(String? _errorMsg) => super.noSuchMethod(
        Invocation.setter(
          #errorMsg,
          _errorMsg,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void updateFromJson(Map<String, dynamic>? json) => super.noSuchMethod(
        Invocation.method(
          #updateFromJson,
          [json],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> fetchCharacterInfo(dynamic charInfoAPI) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCharacterInfo,
          [charInfoAPI],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
