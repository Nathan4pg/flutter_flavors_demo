// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_code_practical/test/character_list_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:flutter_code_practical/models/character.dart' as _i3;
import 'package:flutter_code_practical/view_models/character_view_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUri_0 extends _i1.SmartFake implements Uri {
  _FakeUri_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CharacterViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharacterViewModel extends _i1.Mock
    implements _i2.CharacterViewModel {
  MockCharacterViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Uri get charAPI => (super.noSuchMethod(
        Invocation.getter(#charAPI),
        returnValue: _FakeUri_0(
          this,
          Invocation.getter(#charAPI),
        ),
      ) as Uri);

  @override
  String get errorMsg => (super.noSuchMethod(
        Invocation.getter(#errorMsg),
        returnValue: '',
      ) as String);

  @override
  set errorMsg(String? _errorMsg) => super.noSuchMethod(
        Invocation.setter(
          #errorMsg,
          _errorMsg,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i3.Character> get characters => (super.noSuchMethod(
        Invocation.getter(#characters),
        returnValue: <_i3.Character>[],
      ) as List<_i3.Character>);

  @override
  List<_i3.Character> get filteredCharacters => (super.noSuchMethod(
        Invocation.getter(#filteredCharacters),
        returnValue: <_i3.Character>[],
      ) as List<_i3.Character>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> fetchCharacters() => (super.noSuchMethod(
        Invocation.method(
          #fetchCharacters,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void search(String? searchText) => super.noSuchMethod(
        Invocation.method(
          #search,
          [searchText],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateSelectedCharacter(_i3.Character? character) => super.noSuchMethod(
        Invocation.method(
          #updateSelectedCharacter,
          [character],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
